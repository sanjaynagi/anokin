name: ODK Data Processing and MyST GitHub Pages Deploy
on:
  # Keep the push trigger for manual updates
  push:
    branches: [main]
  # Add scheduled runs at 11am and 12pm UTC daily
  schedule:
    - cron: '0 11 * * *'
    - cron: '0 12 * * *'
  # Allow manual triggering
  workflow_dispatch:

env:
  # `BASE_URL` determines the website is served from, including CSS & JS assets
  BASE_URL: /${{ github.event.repository.name }}

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Python for ODK data processing
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install papermill plotly pandas requests
      
      # Create the script to pull ODK data
      - name: Create ODK data pull script
        run: |
          mkdir -p scripts
          cat > scripts/pull_odk_data.py << 'EOF'
          import os
          import requests
          import pandas as pd
          import json
          import zipfile
          import io
          
          # Get credentials from environment variables
          email = os.environ.get('ODK_EMAIL')
          password = os.environ.get('ODK_PASSWORD')
          odk_server = os.environ.get('ODK_SERVER')
          project_id = os.environ.get('ODK_PROJECT_ID')
          
          # Get form IDs
          morph_form_id = os.environ.get('ODK_MORPH_FORM_ID')
          uvlt_form_id = os.environ.get('ODK_UVLT_FORM_ID')
          asp_form_id = os.environ.get('ODK_ASP_FORM_ID')
          
          print(f"Connecting to ODK server: {odk_server}")
          
          # Step 1: Authenticate with ODK Central to get a session token
          session = requests.Session()
          try:
              auth_response = session.post(
                  f"{odk_server}/v1/sessions",
                  json={
                      "email": email,
                      "password": password
                  }
              )
              auth_response.raise_for_status()
              
              # Extract the token from the response
              token = auth_response.json().get('token')
              if not token:
                  raise Exception("Failed to get authentication token")
                  
              print("Successfully authenticated with ODK Central")
              
              # Step 2: Use the token for subsequent requests
              headers = {
                  "Authorization": f"Bearer {token}"
              }
              
              # Create the data directory
              data_dir = "docs/anokin-site/data"
              os.makedirs(data_dir, exist_ok=True)
              
              # 1. Download and extract morphological ID form data (with repeat groups)
              print(f"Fetching data for project {project_id}, form {morph_form_id}")
              
              morph_response = session.get(
                  f"{odk_server}/v1/projects/{project_id}/forms/{morph_form_id}/submissions.csv.zip?attachments=false",
                  headers=headers
              )
              morph_response.raise_for_status()
              
              # Create a BytesIO object from the response content
              zip_content = io.BytesIO(morph_response.content)
              
              # Extract the ZIP file
              with zipfile.ZipFile(zip_content) as zip_ref:
                  # List all files in the ZIP
                  print("Files in the morphological ID ZIP archive:")
                  for file_info in zip_ref.infolist():
                      print(f" - {file_info.filename}")
                  
                  # Extract all files to the data directory
                  zip_ref.extractall(data_dir)
              
              print("Morphological ID data successfully downloaded and extracted")
              
              # 2. Download UVLT form data (no repeat groups)
              print(f"Fetching data for project {project_id}, form {uvlt_form_id}")
              
              uvlt_response = session.get(
                  f"{odk_server}/v1/projects/{project_id}/forms/{uvlt_form_id}/submissions.csv",
                  headers=headers
              )
              uvlt_response.raise_for_status()
              
              # Save the UVLT data
              with open(os.path.join(data_dir, f"{uvlt_form_id}.csv"), "wb") as f:
                  f.write(uvlt_response.content)
              
              print("UVLT data successfully downloaded")
              
              # 3. Download Indoor Sampling form data (no repeat groups)
              print(f"Fetching data for project {project_id}, form {asp_form_id}")
              
              asp_response = session.get(
                  f"{odk_server}/v1/projects/{project_id}/forms/{asp_form_id}/submissions.csv",
                  headers=headers
              )
              asp_response.raise_for_status()
              
              # Save the Indoor Sampling data
              with open(os.path.join(data_dir, f"{asp_form_id}.csv"), "wb") as f:
                  f.write(asp_response.content)
              
              print("Indoor Sampling data successfully downloaded")
              
              # Optional: Log out / end the session
              logout_response = session.delete(
                  f"{odk_server}/v1/sessions/{token}",
                  headers=headers
              )
              logout_response.raise_for_status()
              print("Successfully logged out")
              
          except requests.exceptions.RequestException as e:
              print(f"Error during ODK API request: {e}")
              if hasattr(e, 'response') and e.response:
                  print(f"Response status code: {e.response.status_code}")
                  print(f"Response text: {e.response.text}")
              raise
          except Exception as e:
              print(f"Unexpected error: {e}")
              raise
          EOF
      
      # Pull data from ODK
      - name: Pull data from ODK
        run: python scripts/pull_odk_data.py
        env:
          ODK_EMAIL: ${{ secrets.ODK_EMAIL }}
          ODK_PASSWORD: ${{ secrets.ODK_PASSWORD }}
          ODK_SERVER: ${{ secrets.ODK_SERVER }}
          ODK_PROJECT_ID: ${{ secrets.ODK_PROJECT_ID }}
          ODK_MORPH_FORM_ID: ${{ secrets.ODK_MORPH_FORM_ID }}
          ODK_UVLT_FORM_ID: ${{ secrets.ODK_UVLT_FORM_ID }}
          ODK_ASP_FORM_ID: ${{ secrets.ODK_ASP_FORM_ID }}
      
      # Execute the notebook with papermill
      - name: Execute notebook with papermill
        run: |
          # Adjust the path to your notebook
          papermill docs/anokin-site/notebooks/morpho-id-auto.ipynb docs/anokin-site/notebooks/morpho-id-auto.ipynb
      
      # Setup Node.js for MyST
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      
      - name: Install MyST Markdown
        run: npm install -g mystmd
      
      - name: Build HTML Assets
        run: cd docs/anokin-site && myst build --html
      
      - name: Debug Build Output
        run: ls -R docs/anokin-site/_build/html
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/anokin-site/_build/html'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
